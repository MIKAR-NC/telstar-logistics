@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Telstar Logistics</h1>
    <div class="input-group ">
  <span id="fromLabel" class="input-group-text" id="addon-wrapping">From</span>
  
  <select id="from" aria-label="from" asp-items="@(ViewBag.Cities)"></select>

    <span id="toLabel"class="input-group-text" id="addon-wrapping">To</span>

    <select id="to" aria-label="to" asp-items="@(ViewBag.Cities)"></select>
   


</div>
 <div class="mb-3 pt-3 input-group">
<label id="weightlabel" for="customRange1" class="form-label">Weight (KG):</label>        
<input id="weight" type="number" name="weight">
 </div>
<div class="input-group mb-3">
  <label id="optionslabel" class="input-group-text" for="inputGroupSelect01">Options</label>


  <select class="form-select" id="inputGroupSelect01" asp-items="@(ViewBag.ShippingTypes)"></select>
  <button id="searchbutton" class="btn btn-outline-secondary" type="button" id="button-addon1" onclick="performSearch()">Search</button>
</div>

<table class="table table-striped table-hover">
  <thead>
    <tr>
      <th id="fromhead" scope="col">From</th>
      <th id="tohead" scope="col">To</th>
      <th id="timehead" scope="col">Time</th>
      <th id="costhead" scope="col">Cost</th>
    </tr>
  </thead>
  <tbody id="resultBody">
  </tbody>
</table>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Summary</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form>
           <div class="mb-3">
            <label for="recipient-name" class="col-form-label">From:</label>
            <p>Mongo</p>
          </div>
    <div class="input-group">
      <div class="input-group-text">From:</div>
      <p type="text" class="form-control" id="inlineFormInputGroupUsername" placeholder="Username">
    </div>
          
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Confirm</button>
      </div>
    </div>
  </div>
</div>

</div>
<script>

    function performSearch() {
        const from = $("#from").val();
        const to = $("#to").val();
        const weight = $("#weight").val();
        const type = $("#inputGroupSelect01").val();
        const searchResults = getRoutes(from, to, type, weight);
        updateTable(searchResults);
    }

    function updateTable(results) {
        var tablebody = $('#resultBody');
        tablebody.empty();
        for (var i = 0; i < results.length; i++) {
            // create an <tr> element, append it to the <tbody> and cache it as a variable:
            var tr = $('<tr/>').appendTo(tablebody);
            const route = results[i];
            tr.append('<td>' + route.from + '</td>');
            tr.append('<td>' + route.to + '</td>');
            tr.append('<td>' + route.time + '</td>');
            tr.append('<td>' + route.cost + '</td>');
        }
    }


    const exampleModal = document.getElementById('exampleModal')
    exampleModal.addEventListener('show.bs.modal', event => {
      // Button that triggered the modal
      const button = event.relatedTarget
      // Extract info from data-bs-* attributes
      const recipient = button.getAttribute('data-bs-whatever')
      // If necessary, you could initiate an AJAX request here
      // and then do the updating in a callback.
      //
      // Update the modal's content.
      const modalTitle = exampleModal.querySelector('.modal-title')
      const modalBodyInput = exampleModal.querySelector('.modal-body input')

      modalTitle.textContent = `Summary`
      modalBodyInput.value = recipient
    })

    function getRoutes(from, to, shipmentType, weight) {
        const request = new XMLHttpRequest();
        const url = `/api/1/routes/?from=${from}&to=${to}&type=${shipmentType}&weight=${weight}`;
        let response = {}

        request.open("GET", url, false);
        request.setRequestHeader("Content-Type", "application/json");
        request.onreadystatechange = function () {
            if (request.readyState == XMLHttpRequest.DONE) {
                if (request.status == 200)
                    response = JSON.parse(request.responseText);
            }
        };
        // return response;
        //TODO - REMOVE THE BELOW LINE WHEN THE ENDPOINT HAS BEEN IMPLEMENTED IN THE BACKEND
        return [{ "from": from, "to": to, "time": "26", "cost": "500" }, { "from": from, "to": to, "time": "55", "cost": "300" }, { "from": from, "to": to, "time": "88", "cost": "200" }];
    }

    function book(from, to, time, cost) {
        const request = new XMLHttpRequest();
        const url = `/api/1/booking/?from=${from}&to=${to}&cost=${cost}&time=${time}`;
        let success = false;

        request.open("POST", url, false);
        request.setRequestHeader("Content-Type", "application/json");
        request.onreadystatechange = function () {
            if (request.readyState == XMLHttpRequest.DONE) {
                if (request.status == 201)
                    success = true;
            }
        };
        return success;
    }

    function getLangCookie() {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${"lang"}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
}

var checkCookie = function() {

    return function() {
        var language = getLangCookie();
        let weighttext = "Weight (kg)";
        let totext = "To";
        let fromtext = "From";
        let optionsText = "Options";
        let searchText = "Search"
        let costText = "Cost";
        let timeText = "Time"
        if (language === "fr") {
            weighttext = "Masse (kg)";
            totext = "Pour";
            fromtext = "Depuis";
            optionsText = "Choix";
            searchText = "Recherche"
            costText = "Coût";
            timeText = "Temps"
        }
        $("#weightlabel").text(weighttext)
        $("#toLabel").text(totext)
        $("#fromLabel").text(fromtext)
        $("#optionslabel").text(optionsText)
        $("#searchbutton").text(searchText)
        $("#fromhead").text(fromtext)
        $("#tohead").text(totext)
        $("#costhead").text(costText)
        $("#timehead").text(timeText)
    };
}();

window.setInterval(checkCookie, 100); // run every 100 ms
</script>